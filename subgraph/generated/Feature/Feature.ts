// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ClaimSubmit extends ethereum.Event {
  get params(): ClaimSubmit__Params {
    return new ClaimSubmit__Params(this);
  }
}

export class ClaimSubmit__Params {
  _event: ClaimSubmit;

  constructor(event: ClaimSubmit) {
    this._event = event;
  }

  get _transactionID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _claimID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Dispute extends ethereum.Event {
  get params(): Dispute__Params {
    return new Dispute__Params(this);
  }
}

export class Dispute__Params {
  _event: Dispute;

  constructor(event: Dispute) {
    this._event = event;
  }

  get _arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _disputeID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _metaEvidenceID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _evidenceGroupID(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Evidence extends ethereum.Event {
  get params(): Evidence__Params {
    return new Evidence__Params(this);
  }
}

export class Evidence__Params {
  _event: Evidence;

  constructor(event: Evidence) {
    this._event = event;
  }

  get _arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _evidenceGroupID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _party(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _evidence(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class HasToPayFee extends ethereum.Event {
  get params(): HasToPayFee__Params {
    return new HasToPayFee__Params(this);
  }
}

export class HasToPayFee__Params {
  _event: HasToPayFee;

  constructor(event: HasToPayFee) {
    this._event = event;
  }

  get _transactionID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _party(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class MetaEvidence extends ethereum.Event {
  get params(): MetaEvidence__Params {
    return new MetaEvidence__Params(this);
  }
}

export class MetaEvidence__Params {
  _event: MetaEvidence;

  constructor(event: MetaEvidence) {
    this._event = event;
  }

  get _metaEvidenceID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _evidence(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class MetaTransactionExecuted extends ethereum.Event {
  get params(): MetaTransactionExecuted__Params {
    return new MetaTransactionExecuted__Params(this);
  }
}

export class MetaTransactionExecuted__Params {
  _event: MetaTransactionExecuted;

  constructor(event: MetaTransactionExecuted) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get relayerAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Payment extends ethereum.Event {
  get params(): Payment__Params {
    return new Payment__Params(this);
  }
}

export class Payment__Params {
  _event: Payment;

  constructor(event: Payment) {
    this._event = event;
  }

  get _transactionID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Refund extends ethereum.Event {
  get params(): Refund__Params {
    return new Refund__Params(this);
  }
}

export class Refund__Params {
  _event: Refund;

  constructor(event: Refund) {
    this._event = event;
  }

  get _transactionID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _party(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Ruling extends ethereum.Event {
  get params(): Ruling__Params {
    return new Ruling__Params(this);
  }
}

export class Ruling__Params {
  _event: Ruling;

  constructor(event: Ruling) {
    this._event = event;
  }

  get _arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _disputeID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _ruling(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Feature__claimsResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: i32;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set(
      "value8",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value8))
    );
    return map;
  }
}

export class Feature__transactionsResult {
  value0: Address;
  value1: Address;
  value2: Bytes;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: Bytes,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromBytes(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    return map;
  }
}

export class Feature extends ethereum.SmartContract {
  static bind(address: Address): Feature {
    return new Feature("Feature", address);
  }

  CHILD_CHAIN_ID(): BigInt {
    let result = super.call("CHILD_CHAIN_ID", "CHILD_CHAIN_ID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_CHILD_CHAIN_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "CHILD_CHAIN_ID",
      "CHILD_CHAIN_ID():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CHILD_CHAIN_ID_BYTES(): Bytes {
    let result = super.call(
      "CHILD_CHAIN_ID_BYTES",
      "CHILD_CHAIN_ID_BYTES():(bytes)",
      []
    );

    return result[0].toBytes();
  }

  try_CHILD_CHAIN_ID_BYTES(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CHILD_CHAIN_ID_BYTES",
      "CHILD_CHAIN_ID_BYTES():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ERC712_VERSION(): string {
    let result = super.call("ERC712_VERSION", "ERC712_VERSION():(string)", []);

    return result[0].toString();
  }

  try_ERC712_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "ERC712_VERSION",
      "ERC712_VERSION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ROOT_CHAIN_ID(): BigInt {
    let result = super.call("ROOT_CHAIN_ID", "ROOT_CHAIN_ID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ROOT_CHAIN_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ROOT_CHAIN_ID",
      "ROOT_CHAIN_ID():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ROOT_CHAIN_ID_BYTES(): Bytes {
    let result = super.call(
      "ROOT_CHAIN_ID_BYTES",
      "ROOT_CHAIN_ID_BYTES():(bytes)",
      []
    );

    return result[0].toBytes();
  }

  try_ROOT_CHAIN_ID_BYTES(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ROOT_CHAIN_ID_BYTES",
      "ROOT_CHAIN_ID_BYTES():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  claims(param0: BigInt): Feature__claimsResult {
    let result = super.call(
      "claims",
      "claims(uint256):(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Feature__claimsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toI32()
    );
  }

  try_claims(param0: BigInt): ethereum.CallResult<Feature__claimsResult> {
    let result = super.tryCall(
      "claims",
      "claims(uint256):(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Feature__claimsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toI32()
      )
    );
  }

  disputeIDtoClaimID(param0: BigInt): BigInt {
    let result = super.call(
      "disputeIDtoClaimID",
      "disputeIDtoClaimID(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_disputeIDtoClaimID(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "disputeIDtoClaimID",
      "disputeIDtoClaimID(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getChainId(): BigInt {
    let result = super.call("getChainId", "getChainId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getChainId", "getChainId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimIDsByAddress(_address: Address): Array<BigInt> {
    let result = super.call(
      "getClaimIDsByAddress",
      "getClaimIDsByAddress(address):(uint256[])",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBigIntArray();
  }

  try_getClaimIDsByAddress(
    _address: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getClaimIDsByAddress",
      "getClaimIDsByAddress(address):(uint256[])",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getCountTransactions(): BigInt {
    let result = super.call(
      "getCountTransactions",
      "getCountTransactions():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCountTransactions(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCountTransactions",
      "getCountTransactions():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDomainSeperator(): Bytes {
    let result = super.call(
      "getDomainSeperator",
      "getDomainSeperator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getDomainSeperator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getDomainSeperator",
      "getDomainSeperator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getNonce(user: Address): BigInt {
    let result = super.call("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getNonce(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTransactionIDsByAddress(_address: Address): Array<BigInt> {
    let result = super.call(
      "getTransactionIDsByAddress",
      "getTransactionIDsByAddress(address):(uint256[])",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBigIntArray();
  }

  try_getTransactionIDsByAddress(
    _address: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getTransactionIDsByAddress",
      "getTransactionIDsByAddress(address):(uint256[])",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  transactions(param0: BigInt): Feature__transactionsResult {
    let result = super.call(
      "transactions",
      "transactions(uint256):(address,address,bytes,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Feature__transactionsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBytes(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBoolean()
    );
  }

  try_transactions(
    param0: BigInt
  ): ethereum.CallResult<Feature__transactionsResult> {
    let result = super.tryCall(
      "transactions",
      "transactions(uint256):(address,address,bytes,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Feature__transactionsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBytes(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBoolean()
      )
    );
  }
}

export class AppealCall extends ethereum.Call {
  get inputs(): AppealCall__Inputs {
    return new AppealCall__Inputs(this);
  }

  get outputs(): AppealCall__Outputs {
    return new AppealCall__Outputs(this);
  }
}

export class AppealCall__Inputs {
  _call: AppealCall;

  constructor(call: AppealCall) {
    this._call = call;
  }

  get _claimID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AppealCall__Outputs {
  _call: AppealCall;

  constructor(call: AppealCall) {
    this._call = call;
  }
}

export class ChallengeClaimCall extends ethereum.Call {
  get inputs(): ChallengeClaimCall__Inputs {
    return new ChallengeClaimCall__Inputs(this);
  }

  get outputs(): ChallengeClaimCall__Outputs {
    return new ChallengeClaimCall__Outputs(this);
  }
}

export class ChallengeClaimCall__Inputs {
  _call: ChallengeClaimCall;

  constructor(call: ChallengeClaimCall) {
    this._call = call;
  }

  get _claimID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChallengeClaimCall__Outputs {
  _call: ChallengeClaimCall;

  constructor(call: ChallengeClaimCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get _transactionID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get claimID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimForCall extends ethereum.Call {
  get inputs(): ClaimForCall__Inputs {
    return new ClaimForCall__Inputs(this);
  }

  get outputs(): ClaimForCall__Outputs {
    return new ClaimForCall__Outputs(this);
  }
}

export class ClaimForCall__Inputs {
  _call: ClaimForCall;

  constructor(call: ClaimForCall) {
    this._call = call;
  }

  get _transactionID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimForCall__Outputs {
  _call: ClaimForCall;

  constructor(call: ClaimForCall) {
    this._call = call;
  }

  get claimID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateTransactionCall extends ethereum.Call {
  get inputs(): CreateTransactionCall__Inputs {
    return new CreateTransactionCall__Inputs(this);
  }

  get outputs(): CreateTransactionCall__Outputs {
    return new CreateTransactionCall__Outputs(this);
  }
}

export class CreateTransactionCall__Inputs {
  _call: CreateTransactionCall;

  constructor(call: CreateTransactionCall) {
    this._call = call;
  }

  get _arbitrator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _arbitratorExtraData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _deposit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _timeoutPayment(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _delayClaim(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _metaEvidence(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class CreateTransactionCall__Outputs {
  _call: CreateTransactionCall;

  constructor(call: CreateTransactionCall) {
    this._call = call;
  }

  get transactionID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExecuteMetaTransactionCall extends ethereum.Call {
  get inputs(): ExecuteMetaTransactionCall__Inputs {
    return new ExecuteMetaTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteMetaTransactionCall__Outputs {
    return new ExecuteMetaTransactionCall__Outputs(this);
  }
}

export class ExecuteMetaTransactionCall__Inputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sigR(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get sigS(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get sigV(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class ExecuteMetaTransactionCall__Outputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PayCall extends ethereum.Call {
  get inputs(): PayCall__Inputs {
    return new PayCall__Inputs(this);
  }

  get outputs(): PayCall__Outputs {
    return new PayCall__Outputs(this);
  }
}

export class PayCall__Inputs {
  _call: PayCall;

  constructor(call: PayCall) {
    this._call = call;
  }

  get _claimID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PayCall__Outputs {
  _call: PayCall;

  constructor(call: PayCall) {
    this._call = call;
  }
}

export class RefundCall extends ethereum.Call {
  get inputs(): RefundCall__Inputs {
    return new RefundCall__Inputs(this);
  }

  get outputs(): RefundCall__Outputs {
    return new RefundCall__Outputs(this);
  }
}

export class RefundCall__Inputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }

  get _transactionID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RefundCall__Outputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }
}

export class RuleCall extends ethereum.Call {
  get inputs(): RuleCall__Inputs {
    return new RuleCall__Inputs(this);
  }

  get outputs(): RuleCall__Outputs {
    return new RuleCall__Outputs(this);
  }
}

export class RuleCall__Inputs {
  _call: RuleCall;

  constructor(call: RuleCall) {
    this._call = call;
  }

  get _disputeID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _ruling(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RuleCall__Outputs {
  _call: RuleCall;

  constructor(call: RuleCall) {
    this._call = call;
  }
}

export class SubmitEvidenceCall extends ethereum.Call {
  get inputs(): SubmitEvidenceCall__Inputs {
    return new SubmitEvidenceCall__Inputs(this);
  }

  get outputs(): SubmitEvidenceCall__Outputs {
    return new SubmitEvidenceCall__Outputs(this);
  }
}

export class SubmitEvidenceCall__Inputs {
  _call: SubmitEvidenceCall;

  constructor(call: SubmitEvidenceCall) {
    this._call = call;
  }

  get _claimID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _evidence(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SubmitEvidenceCall__Outputs {
  _call: SubmitEvidenceCall;

  constructor(call: SubmitEvidenceCall) {
    this._call = call;
  }
}
